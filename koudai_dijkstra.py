from collections import defaultdict
from heapq import heappop, heappush
import csv

#予備
def matrix2input(matrix):
    inputs = []
    for i in range(0,n):
        for j in range(0,n):
            matrix_value = [i,j,matrix[i][j]]
            inputs.append(matrix_value)
    return inputs

def matrix_size(inputs, n=0):
    for i in inputs:
        if i[0] > n:
            n = i[0]
        if i[1] > n:
            n = i[1]
    n += 1
    print("matrix shape is",(n,n))
    return n

class Graph(object):
    def __init__(self):
        self.graph = defaultdict(list)

    def __len__(self):
        return len(self.graph)

    def add_edge(self, src, dst, weight=1):
        self.graph[src].append((dst, weight))

    def get_nodes(self):
        return self.graph.keys()

class Dijkstra(object):

    def __init__(self, graph, start):
        self.g = graph.graph

        self.dist = defaultdict(lambda: float('inf'))
        self.dist[start] = start

        self.prev = defaultdict(lambda: None)

        self.Q = []
        heappush(self.Q, (self.dist[start], start))

        while self.Q:
            dist_u, u = heappop(self.Q)
            if self.dist[u] < dist_u:
                continue
            for v, weight in self.g[u]:
                alt = dist_u + weight
                if self.dist[v] > alt:
                    self.dist[v] = alt
                    self.prev[v] = u
                    heappush(self.Q, (alt, v))

    def shortest_distance(self, goal):
        return self.dist[goal]


inputs = [[418,1,11.4],[1,2,13.5],[2,499,17.8],[499,3,17.8],[3,419,9.2],[419,4,29.5],[4,5,22],[5,420,13.9],[420,500,18.4],[500,6,18.3],[6,421,1],[421,7,15],[7,8,12.2],[8,424,9.7],[424,9,7.3],[9,425,25.2],[425,10,6.9],[10,11,13],[11,429,12],[429,51,23.2],[51,52,5.1],[52,53,12.8],[53,54,6.1],[54,55,2.7],[55,56,7.1],[56,524,15.8],[424,17,13.5],[17,18,12.2],[18,19,16],[19,20,5.6],[20,430,18.8],[430,21,25.8],[21,22,15.7],[22,431,17.6],[431,432,15.7],[431,34,21.2],[34,35,29.6],[35,36,4.1],[36,37,0.1],[37,38,10.9],[38,39,12.8],[39,40,0.1],[40,41,16.9],[41,42,8.2],[42,434,12.3],[430,23,19.3],[23,24,11.5],[24,25,0.1],[25,26,6.5],[26,27,8],[27,28,11.2],[28,433,16.2],[433,49,21],[49,50,0.1],[50,48,3.9],[433,29,13.4],[29,30,6.3],[30,31,10.6],[31,32,7.7],[32,33,0.1],[33,429,28.7],[421,502,15.9],[502,503,15.9],[503,504,15.9],[504,505,15.9],[505,506,15.9],[506,507,15.9],[507,422,15.9],[424,514,15.9],[514,513,15.9],[513,512,15.9],[512,511,15.9],[511,510,15.9],[510,509,15.9],[509,423,15.9],[425,521,15.9],[521,520,15.9],[520,519,15.9],[519,518,15.9],[518,517,15.9],[517,516,15.9],[516,426,15.9],[429,12,12.7],[12,13,27.4],[13,14,14.2],[14,428,11.3],[428,15,26.9],[15,523,15.2],[523,16,15.1],[16,427,9],[428,74,28.4],[74,73,15.7],[73,72,4.4],[72,71,7.4],[71,70,7],[70,69,29.3],[69,68,0.1],[418,498,19],[498,422,19],[422,508,18],[508,423,19],[423,515,17],[515,426,17],[426,555,16],[555,427,16],[427,0,24.3],[0,75,20.6],[75,76,10.4],[76,77,23.2],[77,78,12.3],[78,79,3.1],[79,80,6.4],[524,57,15.9],[57,58,0.1],[58,59,18.1],[59,60,6],[60,438,9.5],[438,527,15.6],[527,526,15.6],[526,46,15.6],[46,437,10],[437,47,14],[47,48,28.8],[437,525,19.9],[525,45,19.8],[45,436,12],[436,434,12],[434,528,17.5],[528,435,17.4],[435,44,15.5],[44,43,22.1],[435,461,19.3],[461,186,13.5],[186,187,0.1],[187,188,6],[188,189,10.5],[189,462,3.9],[462,206,7.6],[206,207,0.1],[207,208,14.6],[208,465,7.8],[465,209,12.1],[209,210,0.1],[210,211,9.2],[211,466,12.3],[466,212,9.9],[212,213,23.3],[213,214,0.1],[214,215,24.8],[215,467,5.9],[467,218,19.1],[218,468,4.3],[468,220,20],[220,219,0.1],[219,464,13.9],[464,199,27.1],[199,200,0.1],[200,201,16.8],[201,202,0.1],[202,203,11.9],[203,204,0.1],[204,205,17.4],[205,465,15.8],[464,198,8],[198,197,12.9],[197,463,13.3],[463,196,4.9],[196,195,19],[195,194,5.8],[194,193,15.1],[193,192,6],[192,191,4.4],[191,190,8.5],[190,462,24.9],[463,460,22.4],[460,176,6.8],[176,177,10.4],[177,178,6.5],[178,179,12.5],[179,180,8.7],[180,181,13.3],[181,182,10.4],[182,183,10.4],[183,184,15],[184,185,16.4],[185,461,18.1],[438,61,25.8],[61,62,5.9],[62,63,3],[63,529,18.3],[529,439,18.3],[439,64,18.9],[64,65,0.1],[65,66,16.3],[66,67,0.1],[67,68,16],[439,530,14.3],[530,531,14.2],[531,97,14.2],[97,96,14.8],[96,95,5.1],[95,440,19.1],[440,94,15.1],[94,93,15.8],[93,92,12.8],[92,441,27.3],[441,80,13.6],[441,81,9.3],[81,82,21.8],[82,83,4],[83,84,16.2],[84,85,11.1],[85,86,13.8],[86,87,12],[87,88,16.1],[88,89,22.3],[89,442,9.9],[442,537,18.6],[537,536,18.6],[536,535,18.6],[535,534,18.6],[534,533,18.6],[533,90,18.6],[442,532,20.6],[532,91,20.5],[91,443,27.4],[443,108,16],[108,107,17.5],[107,106,2.5],[106,105,8],[105,104,10.6],[104,103,6.3],[103,102,8.7],[102,444,2.8],[444,101,7.9],[101,100,8.7],[100,99,13.4],[99,98,20],[98,440,9.1],[440,163,5.5],[162,161,15.4],[161,458,8.3],[162,164,21.5],[164,165,17.9],[165,459,16.7],[459,166,18.8],[166,167,14.4],[167,168,9.4],[168,169,6.4],[169,170,5.5],[170,171,0.1],[171,172,17.7],[172,173,0.1],[173,174,19.1],[174,175,0.1],[175,460,24.7],[459,229,6.3],[229,228,20.2],[228,227,8.6],[227,226,6],[226,225,17.7],[225,224,16],[224,223,0.1],[223,222,7.1],[222,221,9.7],[221,464,13.9],[467,540,17.1],[540,216,17.1],[216,217,14.4],[217,471,14.5],[468,246,28.8],[246,469,4.9],[469,288,9.8],[288,287,10.4],[287,286,11.5],[286,470,6.8],[470,285,23.4],[285,284,12.2],[284,283,0.1],[283,282,18.5],[282,281,0.1],[281,280,13.9],[280,455,18.4],[455,277,1],[277,278,0.1],[278,279,21.7],[279,456,11.3],[456,253,23.8],[253,252,6],[252,251,20],[251,250,0.1],[250,249,8.2],[249,248,8.7],[248,247,12.2],[247,469,16.4],[456,254,12.8],[254,457,21.7],[457,236,11.7],[236,237,4],[237,238,11.2],[238,239,14.4],[239,240,9.4],[240,241,6],[241,242,0.1],[242,243,19],[243,244,6],[244,245,6.1],[245,468,11.8],[459,230,15.8],[230,231,0.1],[231,457,21],[457,232,7],[232,233,13.7],[233,234,13.1],[234,235,12.1],[235,458,9.4],[444,109,26.7],[109,110,21.6],[110,111,0.1],[111,112,16.9],[112,451,6.6],[451,156,20.2],[156,157,5.9],[157,158,14.8],[158,159,10.9],[159,160,8.3],[160,458,16.8],[443,538,15.5],[538,113,15.4],[113,114,7.3],[114,115,7.9],[115,445,13.6],[445,116,13.3],[116,117,15],[117,118,12.8],[118,119,12.6],[119,120,28.4],[120,121,18.4],[121,122,4.7],[122,123,16.4],[123,124,27.7],[124,125,9.3],[125,448,3],[448,126,16.3],[126,127,9.6],[127,128,10.1],[128,129,8.5],[129,130,9.2],[130,131,11.6],[131,132,2.8],[132,133,8.5],[133,134,7.3],[134,135,5.9],[135,136,9.8],[136,137,7.1],[137,138,9],[138,139,17.2],[139,449,9.5],[449,140,10],[140,141,17.8],[141,450,9.9],[450,142,5.3],[142,143,8.6],[143,144,7.1],[144,145,11.2],[145,146,4.1],[146,447,13.7],[447,147,21.5],[147,148,11.5],[148,149,9.5],[149,150,9.8],[150,448,14.2],[447,151,18.7],[151,446,5.3],[446,152,12.1],[152,153,15],[153,154,15.9],[446,155,5.9],[155,445,21.9],[456,255,18.7],[255,256,15.9],[256,257,4.8],[257,258,4.3],[258,259,13.2],[259,260,16.7],[260,261,6.1],[261,262,8.1],[262,263,8.5],[263,264,6.7],[264,452,27.7],[452,265,12.1],[265,451,11.9],[451,539,17.8],[539,450,17.7],[452,266,16],[266,453,7.9],[453,454,17.1],[454,267,16],[267,268,8.6],[268,269,8.4],[269,270,17.6],[270,271,0.1],[271,272,13.6],[272,273,4.7],[273,274,6.3],[274,275,10.3],[275,276,9.7],[276,455,11.8],[454,383,19.4],[383,384,8.3],[384,472,7.4],[472,385,5.5],[385,386,13.8],[386,473,21.7],[473,387,6.3],[387,388,7.3],[388,389,11.4],[389,390,3.6],[390,391,11.7],[391,474,4.8],[474,392,5.7],[392,455,25.9],[474,393,11.4],[393,394,18.8],[394,395,4],[395,396,7.8],[396,397,10.5],[397,475,3.5],[475,556,16.1],[556,470,16.2],[475,541,18.2],[541,476,18.2],[476,398,13.7],[398,399,8.3],[399,400,10.4],[400,401,3.4],[401,402,11.6],[402,403,15.5],[403,477,21.5],[477,404,20.5],[404,473,15.1],[477,405,11.8],[405,406,11.6],[406,478,4.1],[478,407,14.5],[407,408,0.1],[408,409,9.8],[409,410,11.1],[410,411,14.7],[411,479,26.1],[479,412,7.6],[412,476,18.4],[479,413,18.9],[413,542,15.4],[542,414,15.4],[414,415,16.4],[415,416,20.3],[416,417,0.1],[417,478,18.8],[481,289,10.9],[289,480,5],[480,290,14.6],[290,471,10.2],[471,291,10.6],[291,292,13.1],[292,293,4.9],[293,294,10.9],[294,295,0.1],[295,296,16.5],[296,483,30.6],[483,297,7.3],[297,482,9.2],[482,298,15.2],[298,299,26.1],[299,300,16.1],[300,481,29.3],[471,301,14.9],[301,302,10],[302,303,14.5],[303,304,12.4],[304,305,3.6],[305,306,2.7],[306,307,4.5],[307,308,9.1],[308,485,5.8],[485,309,15.5],[309,484,15.1],[484,310,14.6],[310,311,5.4],[311,483,17],[485,312,10.3],[312,313,8.9],[313,314,6.8],[314,315,3.3],[315,486,20.6],[486,316,22.7],[316,484,8.9],[486,317,2.3],[317,318,20.6],[318,319,2.7],[319,320,8],[320,321,11.3],[321,322,7.2],[322,323,5.7],[323,324,9],[324,325,19.8],[325,487,5.6],[487,326,4.9],[326,327,22.7],[327,328,3],[328,488,12],[488,329,23],[329,330,4.6],[330,331,16],[331,332,0.1],[332,489,13.1],[489,333,3.5],[333,334,2.3],[334,335,12.8],[489,336,24],[336,337,2.5],[337,490,15.7],[490,338,13.4],[490,339,26],[339,340,18.7],[340,341,8.7],[341,491,28.1],[491,342,28.1],[342,482,26],[491,343,6.5],[343,344,14],[344,345,15.3],[345,346,5.4],[346,347,11.4],[347,348,8.1],[491,349,11],[349,350,9.4],[350,492,18.5],[492,351,6.5],[351,352,6.5],[352,353,2.9],[353,354,5.4],[354,355,9.8],[355,356,0.1],[356,495,10.4],[495,357,1],[357,358,23],[358,359,6],[359,496,6.3],[496,360,9.8],[360,546,15.1],[546,545,15.1],[545,361,15.1],[361,362,10.6],[496,547,16.9],[547,363,16.8],[363,548,15.8],[548,364,15.9],[364,549,15.3],[549,550,15.3],[550,551,15.3],[551,552,15.3],[552,497,15.3],[497,553,15.6],[553,554,15.6],[554,494,15.7],[495,365,23],[365,366,4.5],[366,367,19.8],[367,368,1.3],[368,369,8],[369,370,1.8],[370,371,5],[371,372,29.2],[372,373,15.3],[373,557,17],[557,494,17],[494,501,21.3],[501,374,21.4],[374,493,7.7],[493,375,13.8],[375,376,12],[376,377,14.8],[377,378,21.9],[378,379,17.5],[379,522,18.1],[522,380,18],[380,544,11.4],[544,492,22.7],[493,543,21],[543,381,21.1],[381,382,9.4],[382,488,8]]

#行列しか持ってなかった場合
#inputs = matrix2input(matrix)

g = Graph()
for src, dst, weight in inputs:
    g.add_edge(src, dst, weight)
    g.add_edge(dst, src, weight)

with open('a.csv', 'w') as f:
    writer = csv.writer(f, lineterminator='\n') # 改行コード（\n）を指定しておく

n = matrix_size(inputs)
row = []
matrix = []
for i in range(0,n):
    d = Dijkstra(g, i)
    for j in range(0,n):
        row.append(round(d.shortest_distance(j)-i,1))
    matrix.append(row)
    print(i)
    print(row)
    row = []
